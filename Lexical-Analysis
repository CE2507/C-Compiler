# Lexical Analysis

## What is Lexical Analysis -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Lexical analysis is simply breaking down the stream of characters taken from a file into tokens. Breaking them down into tokens makes it easier to perform other operations, such as checking for proper syntax later on.

## What are Tokens --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Tokens are defined often by type, which tells our programs later what operations should be performed for the lexeme and the actual lexeme or char/string that is being looked at. Pretty much all lexers share token types listed below:

- **KEYWORD**: This type represents words reserved for the program such as `{if, else, return, etc...}`
- **IDENTIFIERS**: These are user-made tokens, e.g., `{x, line_count, num, etc...}`
- **OPERATORS**: These often complete basic arithmetic operations, e.g., `{+, -, /, =, etc...}`
- **SEPARATORS**: These separate operations or lines, e.g., `{(, ), [, ], {, }, ;, etc...}`
- **LITERAL**: Literal values like numbers, e.g., `{124, true, "hello", 'h', etc...}`
- **COMMENTS**: Tokenizes comments so they can be properly ignored, often thrown out, e.g., `{// this is a comment, /* multiline comment */}`
- **WHITESPACE**: Any space like tab, new line, etc., often thrown out.

## Regex (Regular Expressions) and DFA (Deterministic Finite Automaton) ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

The DFA consists of a finite number of states and uses a switch statement to switch between them as it reads an input. The first state will be a start state and will have one or more accept states. 
These accept states, in our case, will be our different token types defined by:

typedef enum {
    KEYWORD,
    IDENTIFIER,
    OPERATOR,
    LITERALS,
    // etc...
} Token_Types;

typedef simply assigns names to values (enumerators). 'KEYWORD' will correspond to 0, 'IDENTIFIER' to 1, etc. `Token_Types` can be any of these values, allowing us to encode what type of token we have in a readable way. 
It is akin to creating an `int` and changing its value based on type and evaluating the type based on whether `type == //value`.

The regex formats will determine whether tokens are valid. For our tokens, we will create a Token structure with the metadata `Token_Type` type and `char *lexeme`, as shown below:

```c
typedef struct {
    Token_Type type;
    char lexeme[64];
    int line;
    int col;
} Token;
```

`Token_Type` is our enumerator typedef from earlier to store our type, and `char *lexeme` is a pointer to a place in memory (now an array) for storing characters. 
Our lexeme pointer will store the value of the token as found directly in the source file. Finally, we will keep track of line and col for position, which will help with error handling, as will the lexeme if there is an error in type assignment.

## Intro to Pointers in C -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

**IF YOU WOULD LIKE JUST TO KNOW THE SYNTAX FOR C POINTERS, SKIP TO KEY POINTS IN BOLD; ELSE CONTINUE FOR A MORE COMPREHENSIVE UNDERSTANDING.**

In C, pointers allow us to point to places in memory. These places in memory are referenced with memory addresses, which can be returned in many types. 

Let's create a variable `char x = 'a';`. `0x0001` represents the memory address that stores the ASCII value of 'a' (the ASCII table converts binary to characters). 
This would be stored in a CPU register, but for simplicity, let's overlook that for now. In ASCII, the value for 'a' is 97 in decimal, stored in binary, which we will represent in hexadecimal as `0x61`.

--------------
|   0x0001   |  (stores our value 0x61 in binary format)
--------------

If we create a pointer, it reserves a space in memory by pointing to a memory address. For example:

char *x = 'a';

In C, this creates a piece of memory containing a memory address:

--------------
|   0x0001   |  (stores value 0x61 / 'a')
--------------
      ^
      |  (0x0002 stores the memory address 0x0001)
--------------
|   0x00002  |  (0x0002 represents the address and stores 0x0001)
--------------

C has operators to access these values. For example, if we use `*x`, we are using the value in the address that we are pointing to (the value stored in pointer `0x0002`, which points to `0x0001`, where 'a' / `0x61` is stored). If we use `&x`, 
we are using the pointer address (which is `0x0002`). Finally, `x` is the pointer itself (the address stored in the pointer `0x0001`).

When we assign a string to `char *x`, C automatically allocates a block of memory addresses to this pointer initialized at the first character of the string:

char *x = "abc";

Memory Address | Value
----------------------
0x0001         |  'a'
0x0002         |  'b'
0x0003         |  'c'
0x0004         | '\0'  (this represents the end of the string in C)

With a char pointer like `char *x`, we can store strings, which will be important for moving through our input file. It's similar to a char array in function, and these different elements can be accessed with:

- `x[0]` returning 'a'
- `x[1]` returning 'b'
- `x[2]` returning 'c'

### KEY POINTS -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

- Char pointers can store strings.
- Char pointers can access different characters of that string using array syntax.
- In C, you can use:
  - `char *x = 'a'`
  - `*x` to get 'a'
  - `x` to get the address of 'a'
  - `&x` to get the address of where the address of 'a' is stored.

Now that we have a comprehensive understanding of pointers in C, let's continue.

## Intro to Regex in C -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

**Feel free to skip to the next header if you are already familiar with regex.**

Regex, otherwise known as regular expressions, is used for string formatting. 

Let's look at the regex `[a-zA-Z0-9]`, which will match any single alphanumeric character or digit (0-9).

- `a`: is valid
- `H`: is valid
- `9`: is valid

- `90`: is not valid (not single digit)
- `ab`: is not valid (not a single alphanumeric character)
- `!`: is not valid (not within range)

Adding an asterisk to the end will allow for multicharacter matching, e.g., `[a-zA-Z0-9]*`.

- `abc`: is valid
- `Hello47worldh93`: is valid
- `hello world!`: is not valid

For our purposes, we might use the regex `[_a-zA-Z][_a-zA-Z0-9]{0,30}` to represent identifiers.

- `[_a-zA-Z]`: starts with any alphabetic character (both lowercase and uppercase) or an underscore.
- `[_a-zA-Z0-9]{0,30}`: the end can be any alphanumeric character; the range of repetitions is limited to 0 to 30.

In total, an identifier in our program can be 31 characters; `{0,30}` is instead of `*` because `*` would mean 0 or more with no upper limit.

### Valid Strings -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

- `abc123`: 'a' is the first part `[_a-zA-Z]`, and `bc123` fills the second part `[_a-zA-Z0-9]{0,30}`; thus, the string is valid.
- `_903`: valid
- `a_bc_92`: valid

### Invalid Strings -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

- `!a`: anything containing non-alphanumeric characters is invalid.
- `8abc`: starting with a number makes it invalid; `[_a-zA-Z]` is our format for the first character and is not fulfilled.

There are many different operators that will affect the valid string type and will be explained as we go along. For now, let's continue with how we can use this technique in C to identify whether a token type is valid in its construction.

## Regex Implementation -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

First, let's create a more extensive list of token definitions.

#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include <regex.h>

typedef enum {
    IF, ELSE, WHILE, RETURN, VOID, FOR, BREAK, CONTINUE, SWITCH, CASE, 
    IDENTIFIER, 
    INT, DOUBLE, STRING, 
    PLUS, MINUS, TIMES, DIVIDE, MOD, EQUALS, EQUALITY, NOT_EQUAL, LESS, GREATER, 
    INCREMENT, DECREMENT, COMP_ADD, COMP_MINUS,
    OPENP, CLOSEP, OPENB, CLOSEB, OPENC, CLOSEC, SEMICOLON, COLON, COMMA, QUOTE, DQUOTE,
    SLCOMMENT, MLCOMMENT, 
    INVALID,
} Type;

                                                                                                                                                                                                                                         	
typedef struct {
    Type type;
    char lexeme[MAX_TOKEN_LENGTH];
    size_t line;
    size_t col; 
} Token;

Now we have more specific token types. For a simple language, generic token types might suffice, but in expectation of more complexity, I've made it somewhat specific. Now that we have a start for how our lexer will work, let's move on.

First, we will create an array of patterns consisting of regex values corresponding to each token type:

void tokenize(const char* input) {
    regex_t regex[9]; 

    const char* patterns[] = {
        "^(if|else|while|return|int|float|void|for|break|continue|switch|case)\\b", // Keywords
        "^[a-zA-Z_][a-zA-Z0-9_]*", // Identifiers
        "^[0-9]+(\\.[0-9]+)?", // Numbers Integers and Doubles
        "^\\+\\+|--|\\+|\\-|\\*|\\/|=", // Operators
        "^\\+\\=|\\-\\=|\\*\\=|\\/\\=", // Compound assignment operators
        "^[;,.{}()]", // Punctuation
        "^\"([^\"\\\\]|\\\\.)*\"", // String Literals
        "^//[^\n]*", // Single-line comments
        "^/\\*([^*]|[\\r\\n]|(\\*+[^*/]))*\\*+/", // Multi-line comments
    };
}

The order of these patterns matters. Lower values, such as `patterns[0]` (keywords regex), take the highest priority. This may look intimidating, but let's break it down.

## UNDERSTANDING REGEX PATTERNS -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

### Operator Table for Regex
- `^`  | At the beginning of the string 
- `\b` | String bounded by a non-alpha character
- `*`  | Zero or more repetitions of what's in the preceding brackets
- `+`  | One or more repetitions of what's in the preceding brackets
- `()` | Allows you to apply quantifiers to a whole group 
- `?`  | Quantifier that means 0 or 1 of the preceding element

### KEYWORDS
- The keyword regex is straightforward; `^` indicates the value within brackets occurs at the beginning of the string.
- The `|` indicates an OR operation; thus, it checks if the string is "if" or "else" or etc.
- The first `\` of `\\b` escapes the string that tells C that this is not an escape since C reserves commands for `\`. The true value is `\b`, which states the string ends with a non-alphabetic value (e.g., if (x == 1), the `if` is bounded by `(`).

### IDENTIFIERS
- `^[a-zA-Z_]`: The `^` means at the beginning of the string. 
- The first part allows an occurrence of an alphanumeric character or `_`, so `_x` is valid and so is `x`.
- `[a-zA-Z0-9_]*` means zero or more occurrences of any alphanumeric character or `_`.

### NUMBERS 
- `^[0-9]+` means one or more occurrences of a digit at the beginning of the string.
- `(\\.[0-9]+)?` allows for a decimal point with 1 or more repetitions of a digit (for decimals).

### OPERATORS
- `^\\+\\+|--|\\+|\\-|\\*|\\/|=` is similar to keywords, with multiple ORs and starting with `^`.
- The backslashes escape special operators since regex recognizes `+` as an operation and C recognizes `/` as a special operation.

### COMPOUND OPERATORS
- Works similarly to the operators, but with an equals sign after each.

### SEPARATORS
- `^[;,.{}()]` says as long as the string consists of one of these elements (denoted by `[]`), it's valid at the beginning of the string.

### STRINGS
- ^\"([^\"\\\\]|\\\\.)*\" lets take this peice by peice the caret denotes at the
- beginning of the string the [] denote a set but the caret within the set in the term 
- [^\"\\\\] denotes any character thats not " or \ the extra backslashes are just so C
- reads those as their value instead of operators regex has its own version of this once 	
- c does which is why there are so many C for \\\\ passes \\ to regex and regex reads it 
- as \ the \\\\. part just says a \ followed by any character denoted by . allowing for 	
- identification of escape characters like what we just talked about with \\\\ so to 	
- recap either any value aside from \ or " or any character following a \ repeated 0 or 	
- more times inbetween " " is a valid string literal

  
### COMMENTS
- comments arent necessary so ill let you figure it out or try and make one either way 	
- the regex for them is above

### BACK TO THE REGEX IMPLEMENTATION
to sum it up the main method basically executes the patterns and lets us know the general token type of the string from there we could either just have an array of 	
general token types organized so the indecies of the patterns array correspond with the the proper type and assign the token type by referencing the token type through 	
the array with the index we got a match with from our initial comparison or for more specific tokens just execute some basic logic depending on the result of the general type

For more info, check the Regex Lexer for the actual code implementation of what I just said.

Time for an Introduction to DFA

### DFA Intro -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*Note: Things got a bit out of hand here. I didn't expect this to be so involved, but I think I've finally dredged through enough DFA, NFA, and regex stuff to gain a decent understanding. 
I encourage you to check out these first couple of pages I wrote surrounding the concept of DFA. My notes on how to transform the regex will likely be in another file. I apologize if I make mistakes or this is not optimal. 
I've tried my best to make these notes comprehensive, detailed, and correct, but there are many resources I encourage you to look into.

## What is DFA

I will be switching to paper for ease of drawing the graphs.

Please see the branch called **DFA-Images** file for the notes on What DFA and the application

## Implementing DFAs for Lexical Analysis -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

first im going to start with the operators as it is the most invlolved and doesnt explicitly use a state machine

Type operator(char **current) {
        int shift = UNKNOWN; // setting shift to unknown
        // def type of corresponding comp op so long as the order of the operators doesnt change it should work
        const char c = **current;

        switch (c) {
                case '+':
                        shift = PLUS;
                        break;
                case '-':
                        shift = MINUS;
                        break;
                case '*':
                        shift = TIMES;
                        break;
                case '/':
                        shift = DIVIDE;
                        break;
                case '%':
                        shift = MOD;
                        break;
                case '=':
                        shift = EQUAL;
                        break;
                default :
                        printf("defaulted in operator\n"); // just in case something goes wrong im not wondering where it went wrong
                        return shift;
        }
        // incrementing pointer to compare the previous value identified by the type against the following
        shift += 6; // set shift to the first of the second order operations like ++ -- // so on
        (*current)++; // increment current
        // starting with the simpler operation deciding weather
        if (c == **current) {
                printf("TOKEN TYPE OPERATORS C == CURRENT : %d\n", shift); // just for debugging purposes
        } else if (**current == '=') {
                shift += 6; // shifting to third order operators shouldnt overflow because == is the only outlier and its captured in the above statement
                printf("TOKEN TYPE OPERATORS CURRENT == = : %d\n", shift); // just for debugging purposes
        } else {
                shift -= 6; // decrement shift to reconcile the uncoditional shift
                (*current)--; // decrement current to adjust for lexeme assignment as it can only be a single operator at this point
        }

        // if we've made it to the end after all of that its a single operator
        return (Type) shift;
}

The notes for this are in the DFA Images branch of this repository as well as all of the following 
next is identitites this time the presence of a state machine will be obvious 

